type SharedWhiteList = 
 record {
   count: nat;
   shwhitelist: vec SharedUser;
 };
type SharedUser = 
 record {
   balance: nat;
   id: principal;
   status: text;
 };
type SharedPoll = 
 record {
   id: nat;
   name: text;
   options: vec Option;
   status: text;
   votes: vec nat;
 };
type SharedBuffer = 
 record {
   count: nat;
   elems: vec SharedPoll;
 };
type Option = 
 record {
   id: nat;
   name: text;
 };
service : {
  addOptiontoPoll: (nat, text) -> (opt SharedPoll);
  airDrop: (nat) -> (opt SharedWhiteList);
  /// ********************OWNER***************************
  createPoll: (text, vec text) -> (SharedPoll);
  getPollById: (nat) -> (SharedPoll) query;
  getPolls: () -> (SharedBuffer) query;
  getUserBy: (text) -> (SharedUser) query;
  /// ********************CALLER*************************
  register: (text) -> (SharedUser);
  registerVote: (nat, nat, nat) -> (SharedPoll);
  removeOptionToPoll: (nat, nat) -> (opt SharedPoll);
  removePoll: (nat) -> (opt SharedPoll);
  removeUser: () -> (SharedUser);
  renamePoll: (nat, text) -> (opt SharedPoll);
  say: (text) -> (text) query;
}
